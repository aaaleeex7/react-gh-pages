{"version":3,"sources":["Today/CryptoPrice.js","Today/Today.js","History/History.js","App.js","serviceWorker.js","index.js"],"names":["CryptoPrice","_ref","currency","price","react_default","a","createElement","className","concat","toUpperCase","Today","state","btcprice","ltcprice","ethprice","saveStateToLocalStorage","localStorage","setItem","JSON","stringify","_this","restoreStateFromLocalStorage","parse","getItem","setState","data","axios","post","prices","then","response","console","log","catch","error","this","pusher","Pusher","cluster","encrypted","subscribe","_this2","navigator","onLine","setInterval","get","BTC","USD","ETH","LTC","clearInterval","cryptoSubscription","_this$state","CryptoPrice_CryptoPrice","Component","History","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","todayprice","yesterdayprice","twodaysprice","threedaysprice","fourdaysprice","getBTCPrices","bind","assertThisInitialized","getETHPrices","getLTCPrices","date","t","moment","unix","all","spread","eth","btc","ltc","f","format","_this3","subtract","_this4","_this5","_this6","getTodayPrice","getYesterdayPrice","getTwoDaysPrice","getThreeDaysPrice","getFourDaysPrice","App","href","target","rel","src_Today_Today","src_History_History","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.01d3701c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const CryptoPrice = ({ currency, price }) => (\r\n  <div className={`column ${currency}--section`}>\r\n    <h5>${price}</h5>\r\n    <p>1 {currency.toUpperCase()}</p>\r\n  </div>\r\n);\r\n\r\nCryptoPrice.propTypes = {\r\n  price: PropTypes.number.isRequired,\r\n  currency: PropTypes.string.isRequired\r\n};\r\n","import React, { Component } from \"react\";\r\nimport \"./Today.css\";\r\nimport axios from \"axios\";\r\nimport Pusher from \"pusher-js\";\r\nimport { CryptoPrice } from \"./CryptoPrice\";\r\n\r\nclass Today extends Component {\r\n  /**\r\n   * If you're not using the props to initialize your state, you can\r\n   * just define the state like this and remove the constructor\r\n   */\r\n  state = {\r\n    btcprice: 0, // I guess you can keep it an empty string, I just think its better to give it a default value of 0 since they're numbers\r\n    ltcprice: 0,\r\n    ethprice: 0\r\n  };\r\n\r\n  sendPricePusher(data) {\r\n    axios\r\n      .post(\"/prices/new\", {\r\n        prices: data\r\n      })\r\n      .then(response => {\r\n        console.log(response);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * ComponentWillMount is deprecated and should never be used\r\n   * The only exception is:\r\n   * When doing Server Side Rendering, this is the only lifecycle method called\r\n   *\r\n   * Source: https://facebook.github.io/react/docs/react-component.html\r\n   */\r\n  componentWillMount() {\r\n    // establish a connection to Pusher\r\n    this.pusher = new Pusher(\"APP_KEY\", {\r\n      cluster: \"YOUR_CLUSTER\",\r\n      encrypted: true\r\n    });\r\n    // Subscribe to the 'coin-prices' channel\r\n    this.prices = this.pusher.subscribe(\"coin-prices\");\r\n  }\r\n\r\n  /**\r\n   * Let's create utilitary functions to keep our code D.R.Y.\r\n   * Btw, in our use case it's perfectly fine to save the entire state here\r\n   */\r\n  saveStateToLocalStorage = () => {\r\n    localStorage.setItem(\"today-state\", JSON.stringify(this.state));\r\n  };\r\n\r\n  restoreStateFromLocalStorage = () => {\r\n    const state = JSON.parse(localStorage.getItem(\"today-state\"));\r\n    this.setState(state);\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!navigator.onLine) {\r\n      this.setState({ btcprice: localStorage.getItem(\"BTC\") });\r\n      this.setState({ ethprice: localStorage.getItem(\"ETH\") });\r\n      this.setState({ ltcprice: localStorage.getItem(\"LTC\") });\r\n    }\r\n    setInterval(() => {\r\n      axios\r\n        .get(\r\n          \"https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC&tsyms=USD\"\r\n        )\r\n        .then(response => {\r\n          this.setState({ btcprice: response.data.BTC.USD });\r\n          localStorage.setItem(\"BTC\", response.data.BTC.USD);\r\n\r\n          this.setState({ ethprice: response.data.ETH.USD });\r\n          localStorage.setItem(\"ETH\", response.data.ETH.USD);\r\n\r\n          this.setState({ ltcprice: response.data.LTC.USD });\r\n          localStorage.setItem(\"LTC\", response.data.LTC.USD);\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.cryptoSubscription);\r\n  }\r\n\r\n  render() {\r\n    // Let's extract everything uptop to keep our render method cleaner ;)\r\n    const { ethprice, btcprice, ltcprice } = this.state;\r\n    return (\r\n      <div className=\"today--section container\">\r\n        <h2>Current Price</h2>\r\n        <div className=\"columns today--section__box\">\r\n          {/** Creating components for things that repeat themselves is also pretty good**/}\r\n          <CryptoPrice currency=\"btc\" price={btcprice} />\r\n          <CryptoPrice currency=\"eth\" price={ethprice} />\r\n          <CryptoPrice currency=\"ltc\" price={ltcprice} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Today;\r\n","import React, { Component } from \"react\";\r\nimport \"./History.css\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\n\r\nclass History extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      todayprice: {},\r\n      yesterdayprice: {},\r\n      twodaysprice: {},\r\n      threedaysprice: {},\r\n      fourdaysprice: {}\r\n    };\r\n    this.getBTCPrices = this.getBTCPrices.bind(this);\r\n    this.getETHPrices = this.getETHPrices.bind(this);\r\n    this.getLTCPrices = this.getLTCPrices.bind(this);\r\n  }\r\n  // This function gets the ETH price for a specific timestamp/date. The date is passed in as an argument\r\n  getETHPrices(date) {\r\n    return axios.get(\r\n      \"https://min-api.cryptocompare.com/data/pricehistorical?fsym=ETH&tsyms=USD&ts=\" +\r\n        date\r\n    );\r\n  }\r\n  // This function gets the BTC price for a specific timestamp/date. The date is passed in as an argument\r\n  getBTCPrices(date) {\r\n    return axios.get(\r\n      \"https://min-api.cryptocompare.com/data/pricehistorical?fsym=BTC&tsyms=USD&ts=\" +\r\n        date\r\n    );\r\n  }\r\n  // This function gets the LTC price for a specific timestamp/date. The date is passed in as an argument\r\n  getLTCPrices(date) {\r\n    return axios.get(\r\n      \"https://min-api.cryptocompare.com/data/pricehistorical?fsym=LTC&tsyms=USD&ts=\" +\r\n        date\r\n    );\r\n  }\r\n  // This function gets the prices for the current date.\r\n  getTodayPrice() {\r\n    // Get today's date in timestamp\r\n    let t = moment().unix();\r\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\r\n    axios\r\n      .all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\r\n      .then(\r\n        axios.spread((eth, btc, ltc) => {\r\n          let f = {\r\n            date: moment.unix(t).format(\"MMMM Do YYYY\"),\r\n            eth: eth.data.ETH.USD,\r\n            btc: btc.data.BTC.USD,\r\n            ltc: ltc.data.LTC.USD\r\n          };\r\n          // Set the state of todayprice to the content of the object f\r\n          this.setState({ todayprice: f });\r\n        })\r\n      );\r\n  }\r\n  // This function gets the prices for the yesterday.\r\n  getYesterdayPrice() {\r\n    // Get yesterday's date in timestamp\r\n    let t = moment()\r\n      .subtract(1, \"days\")\r\n      .unix();\r\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\r\n    axios\r\n      .all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\r\n      .then(\r\n        axios.spread((eth, btc, ltc) => {\r\n          let f = {\r\n            date: moment.unix(t).format(\"MMMM Do YYYY\"),\r\n            eth: eth.data.ETH.USD,\r\n            btc: btc.data.BTC.USD,\r\n            ltc: ltc.data.LTC.USD\r\n          };\r\n          // Set the state of yesterdayprice to the content of the object f\r\n          this.setState({ yesterdayprice: f });\r\n        })\r\n      );\r\n  }\r\n  // This function gets the prices for the two days ago.\r\n  getTwoDaysPrice() {\r\n    // Get the date for two days ago in timestamp\r\n    let t = moment()\r\n      .subtract(2, \"days\")\r\n      .unix();\r\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\r\n    axios\r\n      .all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\r\n      .then(\r\n        axios.spread((eth, btc, ltc) => {\r\n          let f = {\r\n            date: moment.unix(t).format(\"MMMM Do YYYY\"),\r\n            eth: eth.data.ETH.USD,\r\n            btc: btc.data.BTC.USD,\r\n            ltc: ltc.data.LTC.USD\r\n          };\r\n          // Set the state of twodaysprice to the content of the object f\r\n          this.setState({ twodaysprice: f });\r\n        })\r\n      );\r\n  }\r\n  // This function gets the prices for the three days ago.\r\n  getThreeDaysPrice() {\r\n    // Get the date for three days ago in timestamp\r\n    let t = moment()\r\n      .subtract(3, \"days\")\r\n      .unix();\r\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\r\n    axios\r\n      .all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\r\n      .then(\r\n        axios.spread((eth, btc, ltc) => {\r\n          let f = {\r\n            date: moment.unix(t).format(\"MMMM Do YYYY\"),\r\n            eth: eth.data.ETH.USD,\r\n            btc: btc.data.BTC.USD,\r\n            ltc: ltc.data.LTC.USD\r\n          };\r\n          // Set the state of threedaysprice to the content of the object f\r\n          this.setState({ threedaysprice: f });\r\n        })\r\n      );\r\n  }\r\n  // This function gets the prices for the four days ago.\r\n  getFourDaysPrice() {\r\n    // Get the date for four days ago in timestamp\r\n    let t = moment()\r\n      .subtract(4, \"days\")\r\n      .unix();\r\n    // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\r\n    axios\r\n      .all([this.getETHPrices(t), this.getBTCPrices(t), this.getLTCPrices(t)])\r\n      .then(\r\n        axios.spread((eth, btc, ltc) => {\r\n          let f = {\r\n            date: moment.unix(t).format(\"MMMM Do YYYY\"),\r\n            eth: eth.data.ETH.USD,\r\n            btc: btc.data.BTC.USD,\r\n            ltc: ltc.data.LTC.USD\r\n          };\r\n          // Set the state of fourdaysprice to the content of the object f\r\n          this.setState({ fourdaysprice: f });\r\n        })\r\n      );\r\n  }\r\n  // This is called when an instance of a component is being created and inserted into the DOM.\r\n  componentWillMount() {\r\n    this.getTodayPrice();\r\n    this.getYesterdayPrice();\r\n    this.getTwoDaysPrice();\r\n    this.getThreeDaysPrice();\r\n    this.getFourDaysPrice();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"history--section container\">\r\n        <h2>History (Past 5 days)</h2>\r\n        <div className=\"history--section__box\">\r\n          <div className=\"history--section__box__inner\">\r\n            <h4>{this.state.todayprice.date}</h4>\r\n            <div className=\"columns\">\r\n              <div className=\"column\">\r\n                <p>1 BTC = ${this.state.todayprice.btc}</p>\r\n              </div>\r\n              <div className=\"column\">\r\n                <p>1 ETH = ${this.state.todayprice.eth}</p>\r\n              </div>\r\n              <div className=\"column\">\r\n                <p>1 LTC = ${this.state.todayprice.ltc}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"history--section__box__inner\">\r\n            <h4>{this.state.yesterdayprice.date}</h4>\r\n            <div className=\"columns\">\r\n              <div className=\"column\">\r\n                <p>1 BTC = ${this.state.yesterdayprice.btc}</p>\r\n              </div>\r\n              <div className=\"column\">\r\n                <p>1 ETH = ${this.state.yesterdayprice.eth}</p>\r\n              </div>\r\n              <div className=\"column\">\r\n                <p>1 LTC = ${this.state.yesterdayprice.ltc}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"history--section__box__inner\">\r\n            <h4>{this.state.twodaysprice.date}</h4>\r\n            <div className=\"columns\">\r\n              <div className=\"column\">\r\n                <p>1 BTC = ${this.state.twodaysprice.btc}</p>\r\n              </div>\r\n              <div className=\"column\">\r\n                <p>1 ETH = ${this.state.twodaysprice.eth}</p>\r\n              </div>\r\n              <div className=\"column\">\r\n                <p>1 LTC = ${this.state.twodaysprice.ltc}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"history--section__box__inner\">\r\n            <h4>{this.state.threedaysprice.date}</h4>\r\n            <div className=\"columns\">\r\n              <div className=\"column\">\r\n                <p>1 BTC = ${this.state.threedaysprice.btc}</p>\r\n              </div>\r\n              <div className=\"column\">\r\n                <p>1 ETH = ${this.state.threedaysprice.eth}</p>\r\n              </div>\r\n              <div className=\"column\">\r\n                <p>1 LTC = ${this.state.threedaysprice.ltc}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"history--section__box__inner\">\r\n            <h4>{this.state.fourdaysprice.date}</h4>\r\n            <div className=\"columns\">\r\n              <div className=\"column\">\r\n                <p>1 BTC = ${this.state.fourdaysprice.btc}</p>\r\n              </div>\r\n              <div className=\"column\">\r\n                <p>1 ETH = ${this.state.fourdaysprice.eth}</p>\r\n              </div>\r\n              <div className=\"column\">\r\n                <p>1 LTC = ${this.state.fourdaysprice.ltc}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default History;\r\n","// Import React and Component\nimport React, { Component } from \"react\";\n// Import CSS from App.css\nimport \"./App.css\";\n// Import the Today component to be used below\nimport Today from \"./Today/Today\";\n// Import the History component to be used below\nimport History from \"./History/History\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"\">\n        <div className=\"topheader\">\n          <header className=\"container\">\n            <nav className=\"navbar\">\n              <div className=\"navbar-brand\">\n                <span className=\"navbar-item\">PusherCoins</span>\n              </div>\n              <div className=\"navbar-end\">\n                <a\n                  className=\"navbar-item\"\n                  href=\"https://pusher.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Pusher.com\n                </a>\n              </div>\n            </nav>\n          </header>\n        </div>\n        <section className=\"results--section\">\n          <div className=\"container\">\n            <h1>\n              PusherCoins is a realtime price information about\n              <br /> BTC, ETH and LTC.\n            </h1>\n          </div>\n          <div className=\"results--section__inner\">\n            <Today />\n            <History />\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}